import emoji
import numpy as np
import matplotlib.pyplot as plt
import random

def remove_emojis(text):
    """Remove emojis from the text."""
    return emoji.replace_emoji(text, replace='')

def gaussian_word_count(min_words, max_words, mean=9, stddev=3):
    """Generate a Gaussian distributed word count."""
    while True:
        count = int(np.random.normal(mean, stddev))
        if min_words <= count <= max_words:
            return count
        if count < min_words and random.random() < 0.1:  # 10% chance for less than min_words
            return max(0, count)
        if count > max_words and random.random() < 0.1:  # 10% chance for more than max_words
            return count

def split_lines_by_gaussian_word_count(lines, min_words, max_words):
    """Split lines ensuring Gaussian distribution of word count."""
    split_lines = []
    word_counts = []
    for line in lines:
        words = line.split()
        while len(words) > 0:
            word_count = gaussian_word_count(min_words, max_words)
            segment = words[:word_count]
            split_lines.append(' '.join(segment))
            word_counts.append(len(segment))
            words = words[word_count:]
    return split_lines, word_counts

def plot_word_count_distribution(word_counts, min_words, max_words):
    """Plot the word count distribution."""
    plt.figure(figsize=(12, 6))
    bins = np.arange(min(word_counts) - 0.5, max(word_counts) + 1.5, 1)
    plt.hist(word_counts, bins=bins, edgecolor='black', alpha=0.7, density=True)
    mu, sigma = np.mean(word_counts), np.std(word_counts)
    best_fit_line = (1 / (sigma * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((bins - mu) / sigma) ** 2)
    plt.plot(bins, best_fit_line, '--', color='red', label=f'Gaussian Fit\nMean = {mu:.2f}, Std Dev = {sigma:.2f}')
    plt.axvline(mu, color='blue', linestyle='dashed', linewidth=1, label=f'Mean = {mu:.2f}')
    plt.xlabel('Word Count per Line')
    plt.ylabel('Probability Density')
    plt.title('Distribution of Word Counts in Lines (0-20)')
    plt.legend()
    plt.grid(True)
    plt.xlim(0, 20)
    plt.show()

def process_file(input_file, output_file):
    """Process the input file to remove emojis and adjust line lengths."""
    with open(input_file, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    print(f'Original number of lines: {len(lines)}')

    cleaned_lines = []
    for line in lines:
        # Remove emojis
        line_without_emojis = remove_emojis(line)
        cleaned_line = line_without_emojis.strip()
        if cleaned_line:  # Ensure the line is not empty
            cleaned_lines.append(cleaned_line)

    # Split lines using Gaussian distribution for word count
    final_lines, word_counts = split_lines_by_gaussian_word_count(cleaned_lines, min_words=0, max_words=20)

    with open(output_file, 'w', encoding='utf-8') as file:
        for line in final_lines:
            file.write(line + '\n')

    print(f'Processed number of lines: {len(final_lines)}')

    # Print the mean and std deviation
    print(f'Mean word count: {np.mean(word_counts):.2f}')
    print(f'Standard deviation of word counts: {np.std(word_counts):.2f}')

    plot_word_count_distribution(word_counts, min_words=0, max_words=20)

if __name__ == "__main__":
    input_file = 'text-files/input/oscar.txt'  # The file generated by your previous process
    output_file = 'text-files/output/cleaned.txt'
    process_file(input_file, output_file)
